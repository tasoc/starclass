# GitHub Actions workflow for starclass's continuous integration.

name: Tests

on:
  push:
    branches: [master, devel]
    tags: 'v*'  # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [master, devel]
  schedule:
    - cron: '0 6 1 * *'  # once a month in the morning

jobs:
  # Use the `flake8` tool to check for syntax errors
  flake8:
    name: Flake8
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        lfs: false

    - name: Setup Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-py3.7-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-py3.7-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        grep "numpy" requirements.txt | xargs -I {} pip install "{}"
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        # For some reason we have to specifically ignore G001 as well
        flake8 --select=E9,F63,F7,F82 --ignore=G001 --show-source
        # exit-zero treats all errors as warnings.
        flake8 --exit-zero


  # Run unit tests on Linux, OSX and Windows
  pytest:
    needs: flake8
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8]
        include:
        - os: ubuntu-latest
          pippath: ~/.cache/pip
        - os: macos-latest
          pippath: ~/Library/Caches/pip
        - os: windows-latest
          pippath: ~\AppData\Local\pip\Cache

    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        lfs: false
        fetch-depth: 0

    - name: Create LFS file list
      run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

    - name: Restore LFS cache
      uses: actions/cache@v2
      id: lfs-cache
      with:
        path: .git/lfs
        key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

    - name: Git LFS Pull
      run: git lfs pull

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install MacOS specific requirements
      if: runner.os == 'macOS'
      run: brew install libomp

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ${{ matrix.pippath }}
        key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-py${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        grep "numpy" requirements.txt | xargs -I {} pip install "{}"
        pip install -r requirements.txt
        pip install codecov pytest-cov

    #- name: Setup MPI
    #  if: runner.os == 'Linux'
    #  run: |
    #    sudo apt-get install -y openmpi-bin libopenmpi-dev
    #    pip install mpi4py

    - name: Download cache
      run: python run_download_cache.py -q

    - name: Testing
      run: pytest --cov

    - name: Upload coverage
      uses: codecov/codecov-action@v1
      with:
        env_vars: OS,PYTHON


  # Use sphinx to build the documentation
  docs:
    name: Build documentation
    needs: flake8
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        lfs: false

    - name: Setup Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-py3.7-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-py3.7-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        grep "numpy" requirements.txt | xargs -I {} pip install "{}"
        grep -v -E "^mpi4py|^tensorflow|^xgboost" requirements.txt > requirements.tmp.txt
        pip install -r requirements.tmp.txt
        pip install -r docs/requirements-docs.txt

    - name: Build Sphinx documentation
      run: |
        sphinx-build -a -W --no-color -b html -d docs/_build/doctrees docs docs/_build/html

    #- name: Sphinx coverage
    #  run: |
    #    sphinx-build -a -W --no-color -b coverage -d docs/_build/doctrees docs docs/_build/coverage


  release:
    name: Create release
    if: startsWith( github.ref, 'refs/tags/v' )
    needs: [pytest, docs]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Create LFS file list
      run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

    - name: Restore LFS cache
      uses: actions/cache@v2
      id: lfs-cache
      with:
        path: .git/lfs
        key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

    - name: Git LFS Pull
      run: git lfs pull

    - name: Setup Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-py3.7-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-py3.7-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        grep "numpy" requirements.txt | xargs -I {} pip install "{}"
        pip install -r requirements.txt

    - name: Update VERSION file
      run: python -c "from starclass import version; version.update_release_version();"

    - name: Set env
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/tags/v}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Version ${{ steps.vars.outputs.tag }}
        body: |
          Version ${{ steps.vars.outputs.tag }}
        draft: true
